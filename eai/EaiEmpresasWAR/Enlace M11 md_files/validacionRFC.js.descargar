//Validación de formato de RFC. Dependiendo de la longitud valida o no homoclave:
//Persona Física con homoclave = 13
//Persona Moral con homoclave = 12
//Persona Física sin homoclave = 10
//Persona Física sin homoclave = 9
function validarFormatoRFC(valorValidar, longitud){
	try{
		if("" !== valorValidar){
			if(longitud === valorValidar.length){
				var regRFCWithKey = /^([A-Z,Ñ,&,@]{3,4}([0-9]{2})(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1])[A-Z|\d]{3})$/;
				var regRFCWithoutKey = /^([A-Z,Ñ,&,@]{3,4}([0-9]{2})(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1]))$/;
				return (valorValidar.length>10)?regRFCWithKey.test(valorValidar):regRFCWithoutKey.test(valorValidar);
			}
			else{
				return false;
			}
		}else{
			return true;
		}
	}
     catch(err){
     	return false;
     }
}

//Valida que la parte de fecha del RFC coincida con la fecha de nacimiento proporcionada
function validarFechaRFC(valorValidar, fecha){
	try{
		if("" !== valorValidar){
			var indexFirstNumber = getFirstNumberIndex(valorValidar);
			var dateRFC = valorValidar.substring(indexFirstNumber, indexFirstNumber+6);		
			var dateCompare = fecha.substring(8,10)+fecha.substring(3,5)+fecha.substring(0,2);		
			return dateRFC.localeCompare(dateCompare)===0;
		}else{
			return true;
		}
	}
     catch(err){
     	return false;
     }
}

//Obtiene la posición del primer número encontrado en una cadena
function getFirstNumberIndex(valorValidar){
	try{
		var isNumber =/^\d*$/;
		for(var i=0; i<valorValidar.length; i++){
			if(isNumber.test(valorValidar[i])){
				return i;
			}
		}
		return -1;
	}
    catch(err){
     	return -1;
    }
}

function validarNombreRFC(apellidoPat, apellidoMat, nombre, rfc){
	if(rfc.length === 13){
		return validarNombreRFCFisca(apellidoPat, apellidoMat, nombre, rfc);
	}else{
		return validarNombreRFCMoral(nombre, rfc);
	}
}

//Valida que el nombre corresponda al RFC ingresado
function validarNombreRFCFisca(apellidoPat, apellidoMat, nombre, rfc) {
	function remplazaInconvenites(palabra) { //Si el resultado resulta inconveniente se sustituye
		var resultado = palabra;
		var listadoInconvenientes=[{'anterior':'BUEI','nuevo':'BUEX'},{'anterior':'BUEY','nuevo':'BUEX'},{'anterior':'CACA','nuevo':'CACX'},
		                           {'anterior':'CACO','nuevo':'CACX'},{'anterior':'CAGA','nuevo':'CAGX'},{'anterior':'CAGO','nuevo':'CAGX'},
		                           {'anterior':'CAKA','nuevo':'CAKX'},{'anterior':'COGE','nuevo':'COGX'},{'anterior':'COJA','nuevo':'COJX'},
		                           {'anterior':'COJE','nuevo':'COJX'},{'anterior':'COJI','nuevo':'COJX'},{'anterior':'COJO','nuevo':'COJX'},
		                           {'anterior':'CULO','nuevo':'CULX'},{'anterior':'FETO','nuevo':'FETX'},{'anterior':'GUEY','nuevo':'GUEX'},
		                           {'anterior':'JOTO','nuevo':'JOTX'},{'anterior':'KACA','nuevo':'KACX'},{'anterior':'KACO','nuevo':'KACX'},
		                           {'anterior':'KAGA','nuevo':'KAGX'},{'anterior':'KAGO','nuevo':'KAGX'},{'anterior':'KOGE','nuevo':'KOGX'},
		                           {'anterior':'KOJO','nuevo':'KOJX'},{'anterior':'KAKA','nuevo':'KAKX'},{'anterior':'KULO','nuevo':'KULX'},
		                           {'anterior':'MAME','nuevo':'MAMX'},{'anterior':'MAMO','nuevo':'MAMX'},{'anterior':'MEAR','nuevo':'MEAX'},
		                           {'anterior':'MEON','nuevo':'MEOX'},{'anterior':'MION','nuevo':'MIOX'},{'anterior':'MOCO','nuevo':'MOCX'},
		                           {'anterior':'MULA','nuevo':'MULX'},{'anterior':'PEDA','nuevo':'PEDX'},{'anterior':'PEDO','nuevo':'PEDX'},
		                           {'anterior':'PENE','nuevo':'PENX'},{'anterior':'PUTA','nuevo':'PUTX'},{'anterior':'PUTO','nuevo':'PUTX'},
		                           {'anterior':'QULO','nuevo':'QULX'},{'anterior':'RATA','nuevo':'RATX'},{'anterior':'RUIN','nuevo':'RUIX'},
		                           {'anterior':'CAKO','nuevo':'CAKX'},{'anterior':'MEAS','nuevo':'MEAX'},{'anterior':'MEON','nuevo':'MEOX'}];
		listadoInconvenientes.forEach(function (inconveniente) {
		    if (inconveniente.anterior === palabra) {
		    	resultado =  inconveniente.nuevo;
		    }
		});
		return resultado;
	}
	function quitaArticulos(palabra) { //No se consideran artículos, preposiciones, conjunciones, contracciones
		return palabra.replace(/^DEL /gi, "").replace(/^LAS /gi, "").replace(/^DE /gi,"")
			.replace(/^LA /gi, "").replace(/^Y /gi, "").replace(/^A /gi, "")
			.replace(/^CON /gi, "").replace(/^SUS /gi, "").replace(/^AL /gi, "")
			.replace(/^LOS /gi, "").replace(/^EL /gi, "").replace(/^EN /gi, "");
	}
	function nomCompuestoMuchoUso(palabra) { //No se considera en los nombres compuestos MARIA y JOSE
		nombres = palabra.split(" ");
		if(nombres.length > 1){
			return (palabra.replace(/^MARIA /gi, "").replace(/^JOSE /gi, "")).trim();
		} else {
			return palabra;
		}
		
	}
	function esVocal(letra) {
		var letraM = letra.toUpperCase();
		var pasa = false;
		if(letraM === 'A' || letraM === 'E' || letraM === 'I'){
			pasa = true;
		}else if(letraM === 'O' || letraM === 'U'){
			pasa = true;
		}
		return pasa;
	}
	nombre = nomCompuestoMuchoUso(nombre.toUpperCase());
	apellidoPaterno = apellidoPat.toUpperCase();
	apellidoMaterno = apellidoMat.toUpperCase();
	var rfcN = "";
	apellidoPaterno = quitaArticulos(apellidoPaterno);
	apellidoMaterno = quitaArticulos(apellidoMaterno);
	var tamApellidoPat = apellidoPaterno.length;
	var c;
	var apP1letra = 1; //Si el apellido paterno solo forma 1 caracter, se sacan las primeras dos letras del nombre
	if (apellidoMaterno === "") {
		rfcN += apellidoPaterno.substr(0, 2);//Si no hay apellido materno se sacan los dos primeros caracteres del paterno
	} else {
		rfcN += apellidoPaterno.substr(0, 1);
		for (i = 1; i < tamApellidoPat; i++) { //Solo busca la primer vocal del apellido paterno, cuando hay apellido materno
			c = apellidoPaterno.charAt(i);
			if (esVocal(c)) {
				rfcN += c;
				apP1letra ++; 
				break;
			}
		}
		rfcN += apellidoMaterno.substr(0, 1); //Solo saca la primer letra del apellido materno, cuando hay apellido materno
	}
	if (apP1letra === 2) {
		rfcN += nombre.substr(0, 1);
	} else {
		rfcN += nombre.substr(0, 2); //Si el apellido paterno solo forma 1 caracter o no hay apellido materno, se sacan las primeras dos letras del nombre
	}
	rfc = rfc.substr(0, 4);
	console.log(rfcN);
	rfcN = remplazaInconvenites(rfcN);
	console.log(rfcN +" vs "+ rfc);
	return (rfcN === rfc);
}

//Valida que el nombre corresponda al RFC ingresado
function validarNombreRFCMoral(nombre, rfc) {
	function quitaArticulos(palabra) {
		return palabra.replace(/^DEL /gi, "").replace(/^LAS /gi, "").replace(/^DE /gi,
				"").replace(/^LA /gi, "").replace(/^Y /gi, "").replace(/^A /gi, "");
	}
	nombre = quitaArticulos(nombre.toUpperCase());
	var res = nombre.split(" ",3);
	var rfcN = "";
	
	if(res.length >= 1){
		for (var i in res) {
			if(null !== res[i] && "" !== res[i]){
				var r = res[i];	
				var c;
				for (var z = 0; z < r.length; z ++) {
					if(res.length > 1){
						if(res.length === 3){
							c = r.charAt(z);
							rfcN += c;
							break;
						}else if(res.length === 2){
							if(i === 0){
								c = r.charAt(z);
								rfcN += c;
								break;
							}else{
								rfcN += r.substring(0, 2);	
								break;
							}
						}						
					}else{
						rfcN = r.substring(0, 3);	
						break;
					}
				}
			}
			
		}
	}	
	rfc = rfc.substr(0, 3);
	return (rfcN === rfc);
}